{"name": "test_t010_campaign[https://preproductionpro.rantcell.com/-https://preproductionpro.rantcell.com/]", "status": "failed", "statusDetails": {"message": "AssertionError: assert False", "trace": "self = <testcases.test_T010.Test_T010 object at 0x00000203A648FFD0>, setup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"d300af7dceebf023a8c4056a009290a2\")>, url = 'https://preproductionpro.rantcell.com/'\ntitle = 'https://preproductionpro.rantcell.com/'\n\n    @pytest.mark.parametrize(\"url,title\",\n                             data)\n    def test_t010_campaign(self, setup, url, title):\n        try:\n            lst_status=[]\n            self.driver = setup\n            lst_status.append(GL.launchurl(self, url, title))\n            print(lst_status)\n>           assert GL.launchurl(self, url, title)\nE           AssertionError: assert False\nE            +  where False = <function genlib.launchurl at 0x00000203A6494280>(<testcases.test_T010.Test_T010 object at 0x00000203A648FFD0>, 'https://preproductionpro.rantcell.com/', 'https://preproductionpro.rantcell.com/')\nE            +    where <function genlib.launchurl at 0x00000203A6494280> = GL.launchurl\n\ntestcases\\test_T010.py:24: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testcases.test_T010.Test_T010 object at 0x00000203A648FFD0>, setup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"d300af7dceebf023a8c4056a009290a2\")>, url = 'https://preproductionpro.rantcell.com/'\ntitle = 'https://preproductionpro.rantcell.com/'\n\n    @pytest.mark.parametrize(\"url,title\",\n                             data)\n    def test_t010_campaign(self, setup, url, title):\n        try:\n            lst_status=[]\n            self.driver = setup\n            lst_status.append(GL.launchurl(self, url, title))\n            print(lst_status)\n            assert GL.launchurl(self, url, title)\n            link_login = [By.XPATH, \"//a[normalize-space()='LOGIN']\", \"Login link\"]\n            lst_status.append(GL.clickallure(self,link_login,\"T\"))\n    \n    \n        except Exception as e:\n>           pytest.fail(str(e))\n\ntestcases\\test_T010.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nmsg = \"assert False\\n +  where False = <function genlib.launchurl at 0x00000203A6494280>(<testcases.test_T010.Test_T010 obje...https://preproductionpro.rantcell.com/')\\n +    where <function genlib.launchurl at 0x00000203A6494280> = GL.launchurl\"\npytrace = True\n\n    @_with_exception(Failed)\n    def fail(msg: str = \"\", pytrace: bool = True) -> \"NoReturn\":\n        \"\"\"\n        Explicitly fail an executing test with the given message.\n    \n        :param str msg: the message to show the user as reason for the failure.\n        :param bool pytrace: if false the msg represents the full failure information and no\n            python traceback will be reported.\n        \"\"\"\n        __tracebackhide__ = True\n>       raise Failed(msg=msg, pytrace=pytrace)\nE       Failed: assert False\nE        +  where False = <function genlib.launchurl at 0x00000203A6494280>(<testcases.test_T010.Test_T010 object at 0x00000203A648FFD0>, 'https://preproductionpro.rantcell.com/', 'https://preproductionpro.rantcell.com/')\nE        +    where <function genlib.launchurl at 0x00000203A6494280> = GL.launchurl\n\nvenv\\lib\\site-packages\\_pytest\\outcomes.py:158: Failed\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testcases.test_T010.Test_T010 object at 0x00000203A648FFD0>, setup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"d300af7dceebf023a8c4056a009290a2\")>, url = 'https://preproductionpro.rantcell.com/'\ntitle = 'https://preproductionpro.rantcell.com/'\n\n    @pytest.mark.parametrize(\"url,title\",\n                             data)\n    def test_t010_campaign(self, setup, url, title):\n        try:\n            lst_status=[]\n            self.driver = setup\n            lst_status.append(GL.launchurl(self, url, title))\n            print(lst_status)\n            assert GL.launchurl(self, url, title)\n            link_login = [By.XPATH, \"//a[normalize-space()='LOGIN']\", \"Login link\"]\n            lst_status.append(GL.clickallure(self,link_login,\"T\"))\n    \n    \n        except Exception as e:\n            pytest.fail(str(e))\n        finally:\n            if False not in lst_status:\n                assert True\n            else:\n>               assert False\nE               assert False\n\ntestcases\\test_T010.py:35: AssertionError"}, "attachments": [{"name": "URL", "source": "e668ea80-177b-4051-9d79-efc8650de1d5-attachment.png", "type": "image/png"}, {"name": "URL", "source": "07c3fa8f-4435-42f7-903e-0f9dfb7faecd-attachment.png", "type": "image/png"}], "parameters": [{"name": "url", "value": "'https://preproductionpro.rantcell.com/'"}, {"name": "title", "value": "'https://preproductionpro.rantcell.com/'"}], "start": 1681792678706, "stop": 1681792682930, "uuid": "661ddc09-8b50-485d-b6ef-18177ee90764", "historyId": "02b4f63a51917cba10d9e64793ddf53c", "testCaseId": "fb4fa1735ea56916306a4ce92da5cae9", "fullName": "test_T010#test_t010_campaign", "labels": [{"name": "suite", "value": "test_T010"}, {"name": "subSuite", "value": "Test_T010"}, {"name": "host", "value": "rudresha_c"}, {"name": "thread", "value": "27084-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_T010"}]}